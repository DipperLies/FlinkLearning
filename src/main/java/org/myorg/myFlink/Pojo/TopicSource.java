/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.myorg.myFlink.Pojo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TopicSource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3815673784049435864L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TopicSource\",\"namespace\":\"org.myorg.myFlink.Pojo\",\"fields\":[{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"old_state\",\"type\":\"string\"},{\"name\":\"new_state\",\"type\":\"string\"},{\"name\":\"eqp_id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TopicSource> ENCODER =
      new BinaryMessageEncoder<TopicSource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TopicSource> DECODER =
      new BinaryMessageDecoder<TopicSource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TopicSource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TopicSource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TopicSource>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TopicSource to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TopicSource from a ByteBuffer. */
  public static TopicSource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long time;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence old_state;
  @Deprecated public java.lang.CharSequence new_state;
  @Deprecated public java.lang.CharSequence eqp_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TopicSource() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param id The new value for id
   * @param old_state The new value for old_state
   * @param new_state The new value for new_state
   * @param eqp_id The new value for eqp_id
   */
  public TopicSource(java.lang.Long time, java.lang.CharSequence id, java.lang.CharSequence old_state, java.lang.CharSequence new_state, java.lang.CharSequence eqp_id) {
    this.time = time;
    this.id = id;
    this.old_state = old_state;
    this.new_state = new_state;
    this.eqp_id = eqp_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return id;
    case 2: return old_state;
    case 3: return new_state;
    case 4: return eqp_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  @Override
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Long)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    case 2: old_state = (java.lang.CharSequence)value$; break;
    case 3: new_state = (java.lang.CharSequence)value$; break;
    case 4: eqp_id = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  public String getIdString() {
    return id.toString();
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'old_state' field.
   * @return The value of the 'old_state' field.
   */
  public java.lang.CharSequence getOldState() {
    return old_state;
  }

  /**
   * Sets the value of the 'old_state' field.
   * @param value the value to set.
   */
  public void setOldState(java.lang.CharSequence value) {
    this.old_state = value;
  }

  /**
   * Gets the value of the 'new_state' field.
   * @return The value of the 'new_state' field.
   */
  public java.lang.CharSequence getNewState() {
    return new_state;
  }

  /**
   * Sets the value of the 'new_state' field.
   * @param value the value to set.
   */
  public void setNewState(java.lang.CharSequence value) {
    this.new_state = value;
  }

  /**
   * Gets the value of the 'eqp_id' field.
   * @return The value of the 'eqp_id' field.
   */
  public java.lang.CharSequence getEqpId() {
    return eqp_id;
  }

  /**
   * Sets the value of the 'eqp_id' field.
   * @param value the value to set.
   */
  public void setEqpId(java.lang.CharSequence value) {
    this.eqp_id = value;
  }

  /**
   * Creates a new TopicSource RecordBuilder.
   * @return A new TopicSource RecordBuilder
   */
  public static org.myorg.myFlink.Pojo.TopicSource.Builder newBuilder() {
    return new org.myorg.myFlink.Pojo.TopicSource.Builder();
  }

  /**
   * Creates a new TopicSource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TopicSource RecordBuilder
   */
  public static org.myorg.myFlink.Pojo.TopicSource.Builder newBuilder(org.myorg.myFlink.Pojo.TopicSource.Builder other) {
    return new org.myorg.myFlink.Pojo.TopicSource.Builder(other);
  }

  /**
   * Creates a new TopicSource RecordBuilder by copying an existing TopicSource instance.
   * @param other The existing instance to copy.
   * @return A new TopicSource RecordBuilder
   */
  public static org.myorg.myFlink.Pojo.TopicSource.Builder newBuilder(org.myorg.myFlink.Pojo.TopicSource other) {
    return new org.myorg.myFlink.Pojo.TopicSource.Builder(other);
  }

  /**
   * RecordBuilder for TopicSource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TopicSource>
    implements org.apache.avro.data.RecordBuilder<TopicSource> {

    private long time;
    private java.lang.CharSequence id;
    private java.lang.CharSequence old_state;
    private java.lang.CharSequence new_state;
    private java.lang.CharSequence eqp_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.myorg.myFlink.Pojo.TopicSource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.old_state)) {
        this.old_state = data().deepCopy(fields()[2].schema(), other.old_state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.new_state)) {
        this.new_state = data().deepCopy(fields()[3].schema(), other.new_state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eqp_id)) {
        this.eqp_id = data().deepCopy(fields()[4].schema(), other.eqp_id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TopicSource instance
     * @param other The existing instance to copy.
     */
    private Builder(org.myorg.myFlink.Pojo.TopicSource other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.old_state)) {
        this.old_state = data().deepCopy(fields()[2].schema(), other.old_state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.new_state)) {
        this.new_state = data().deepCopy(fields()[3].schema(), other.new_state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eqp_id)) {
        this.eqp_id = data().deepCopy(fields()[4].schema(), other.eqp_id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder setTime(long value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'old_state' field.
      * @return The value.
      */
    public java.lang.CharSequence getOldState() {
      return old_state;
    }

    /**
      * Sets the value of the 'old_state' field.
      * @param value The value of 'old_state'.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder setOldState(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.old_state = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'old_state' field has been set.
      * @return True if the 'old_state' field has been set, false otherwise.
      */
    public boolean hasOldState() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'old_state' field.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder clearOldState() {
      old_state = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'new_state' field.
      * @return The value.
      */
    public java.lang.CharSequence getNewState() {
      return new_state;
    }

    /**
      * Sets the value of the 'new_state' field.
      * @param value The value of 'new_state'.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder setNewState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.new_state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'new_state' field has been set.
      * @return True if the 'new_state' field has been set, false otherwise.
      */
    public boolean hasNewState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'new_state' field.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder clearNewState() {
      new_state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'eqp_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getEqpId() {
      return eqp_id;
    }

    /**
      * Sets the value of the 'eqp_id' field.
      * @param value The value of 'eqp_id'.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder setEqpId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.eqp_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'eqp_id' field has been set.
      * @return True if the 'eqp_id' field has been set, false otherwise.
      */
    public boolean hasEqpId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'eqp_id' field.
      * @return This builder.
      */
    public org.myorg.myFlink.Pojo.TopicSource.Builder clearEqpId() {
      eqp_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TopicSource build() {
      try {
        TopicSource record = new TopicSource();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Long) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.old_state = fieldSetFlags()[2] ? this.old_state : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.new_state = fieldSetFlags()[3] ? this.new_state : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.eqp_id = fieldSetFlags()[4] ? this.eqp_id : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TopicSource>
    WRITER$ = (org.apache.avro.io.DatumWriter<TopicSource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TopicSource>
    READER$ = (org.apache.avro.io.DatumReader<TopicSource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
